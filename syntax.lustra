## 🌒 Lustra Programming Language — Syntax Specification

---

### 🔤 **Variable Declaration**

let name: String = "Lustra"
let age: Int = 21
let ratio: Float = 3.14
let active: Bool = true
let status = "enabled"     # Type inferred

**UPDATED**4/18/2025**

let name: String = "Lustra"
let age = 5
func greet(who: String): String =>
    return "Hello, " + who
end
if age > 3 =>
    print("Old enough")
else =>
    print("Too young")
end

---

### 📦 **Data Types**

# Primitive Types
Int     # Integer
Float   # Decimal
Bool    # true / false
String  # Text
Char    # Single character

# Complex
List<Int>     # List of integers
Map<String, Int>  # Key-value pair

# Nullable
let val: Int? = null


---

### 🔁 **Control Flow**

if score > 90 then
    print("Excellent")
else if score > 75 then
    print("Good")
else
    print("Keep trying")

while attempts < 3 do
    tryLogin()

for item in collection do
    print(item)


---

### 🧩 **Functions**

func greet(name: String): String =>
    return "Hello, " + name

func add(a: Int, b: Int): Int =>
    a + b

func voidLog(): Void =>
    log("Called")


---

### 🧵 **Classes & Objects**

class Hero(name: String, power: Int):
    func shout(): String =>
        return name + " powers up to " + power.toString()

let h = Hero("Kaeris", 99)
print(h.shout())

---

### 💡 **Pattern Matching**

match element:
    case "fire": ignite()
    case "water": flow()
    case _: defaultMove()


---

### ⛓ **Lambda & Higher Order**

let square = (x: Int) => x * x
let result = map(numbers, (n) => n + 1)


---

### 📚 **Modules**

import math
import "utils/math.lus"

export func multiply(a: Int, b: Int): Int =>
    a * b


---

### 🧪 **Testing & Assertions**


test "Sum works":
    assert add(2, 2) == 4

test "Greeting format":
    assert greet("Kai") == "Hello, Kai"


---

### 🔐 **Access Modifiers**

private func secret() => doNothing()
public func show() => print("Visible")


---

### 🧙 **Special Keywords**

this      # Refers to current object
super     # Call parent class method
null      # Null value
return    # Exit function
await     # Async handling
yield     # Generator value


---

### 🧬 **Type System**

type Point = (x: Float, y: Float)

type User = {
    id: Int,
    name: String,
    active: Bool
}


---

### 💠 **Decorators / Annotations**

@deprecated
func oldFunction() => log("Do not use")

@async
func fetchData(url: String) => ...


---

### 🌌 **Example Script in Lustra**

import "utils/net.lus"

class Phantom(name: String):
    func haunt(target: String): String =>
        return name + " haunts " + target

let p = Phantom("Noctoria")
print(p.haunt("Cafe Zone"))
